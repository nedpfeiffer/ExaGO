.ornl_script_template:
  script:
    # Do _not_ clean up WORKDIR as files are needed for testing
    -  set -xv
    -  mkdir -p "$WORKDIR"
    -  cp -r . "$WORKDIR"
    -  cd "$WORKDIR"
    -  export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    -  MY_CLUSTER=ascent ./buildsystem/build.sh --build-only --job=gcc-cuda || exit 1

.ornl_test_script_template:
  script:
    - set -xv
    -  cd "$WORKDIR"
    -  export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      # Export CTESTARGS defined in variables to run correct tests for stage
    -  export CTESTARGS="--output-on-failure -E Python"
    -  MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
    -  res=$?
    -  exit $res
  # Only running after_script for 
  after_script:
    - cd "$WORKDIR/.."
    - rm -rf "$WORKDIR"

  
.ornl_python_test_script_template:
  script:
    - set -xv
    -  cd "$WORKDIR"
    -  export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      # Export CTESTARGS defined in variables to run correct tests for stage
    -  export CTESTARGS="-VV -R Python"
    -  MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
    -  res=$?
    -  exit $res

.ornl_environment_template:
  variables:
    SCHEDULER_PARAMETERS: "-P CSC359 -nnodes 1 -W 120"
    WORKDIR: /gpfs/wolf/proj-shared/csc359/ci/${CI_PIPELINE_ID}

  # For Crusher CI
.crusher_rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: $CI_PINELINE_SOURCE == "schedule"
    - when: never

.crusher_variables:
  # Only for slurm tagged jobs...
  variables:
    SCHEDULER_PARAMETERS: "-N 1 -A CSC359 --time=60"
    WORKDIR: /gpfs/alpine/csc359/proj-shared/ci/${CI_PIPELINE_ID}

Crusher Build:
  stage: build
  tags: [crusher, shell]
  script:
    - mkdir -p "$WORKDIR"
    - cp -r . "$WORKDIR"
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    - MY_CLUSTER=crusher ./buildsystem/build.sh --build-only --job=clang-hip
    - res=$?
    - exit $res
  extends:
    - .crusher_rules
    - .crusher_variables
  
Crusher Test:
  stage: test
  dependencies:
    - "Crusher Build"
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
  tags: [crusher, slurm]
  script:
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    - export CTESTARGS="--output-on-failure -E Python"
    - MY_CLUSTER=crusher ./buildsystem/build.sh --test-only --job=clang-hip
    - res=$?
    - exit $res
  after_script:
    - cd "$WORKDIR/.."
    - rm -rf "$WORKDIR"
  extends:
    - .crusher_rules
    - .crusher_variables

Crusher Python Test:
  stage: test
  dependencies: 
    - "Crusher Build"
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
  allow_failure: true
  tags: [crusher, slurm]
  script:
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    - export CTESTARGS="--output-on-failure -R Python"
    - MY_CLUSTER=crusher ./buildsystem/build.sh --test-only --job=clang-hip
    - res=$?
    - exit $res
  extends:
    - .crusher_rules
    - .crusher_variables
# ---

# For Ascent CI
.ornl_rules:
  rules:
    - if: '$CI_PROJECT_PATH == "ecpcitest/exasgd/exago"'

Ascent Build:
  stage: build
  tags:
    - nobatch
  extends:
    - .ornl_rules
    - .ornl_script_template
    - .ornl_environment_template

Ascent Test:
  stage: test
  dependencies:
    - 'Ascent Build'
  tags:
    - batch
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
    CTESTARGS: "--output-on-failure -E Python"
  extends:
    - .ornl_rules
    - .ornl_test_script_template
    - .ornl_environment_template

Ascent Py Test:
  stage: test
  dependencies:
    - 'Ascent Build'
  tags:
    - batch 
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
  extends:
    - .ornl_rules
    - .ornl_python_test_script_template
    - .ornl_environment_template
  allow_failure: true
# ---