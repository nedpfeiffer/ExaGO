CASEFILE=$1
RAWFILE=datafiles/scalability/${CASEFILE}_dyn.raw
DYRFILE=datafiles/scalability/${CASEFILE}_dyn.dyr
EVENTFILE=datafiles/scalability/scalcase.event
HOST=`hostname`
OUTFILE=scal${CASEFILE}_ts_${HOST}.m

MPIOPT="-binding cpu:sockets"
TIMEOPT="-dyn_ts_final_time 5.0 -dyn_ts_dt 0.0083333333 -dyn_ts_atol 1e-2 -dyn_ts_rtol 1e-2 -dyn_ts_snes_max_failures 10 -dyn_ts_adapt_dt_max 0.05 -dyn_ts_adapt_dt_min 0.0083333333"

SEMIEXPLICIT2="-dyn_use_semiexplicit 1 -dyn_ts_type rk -dyn_ts_rk_type 2a -dyn_ts_adapt_type none"
SEMIEXPLICIT3="-dyn_use_semiexplicit 1 -dyn_ts_type rk -dyn_ts_adapt_type none"
CN="-dyn_ts_type cn -dyn_ts_adapt_type none"
CNV="-dyn_ts_type cn -dyn_ts_adapt_type basic -dyn_ts_theta_adapt"
ROSW2="-dyn_ts_type rosw -dyn_ts_rosw_type 2m -dyn_ts_adapt_type basic"
ROSW3="-dyn_ts_type rosw -dyn_ts_adapt_type basic"
ROSW4="-dyn_ts_type rosw -dyn_ts_rosw_type 4l -dyn_ts_adapt_type basic"
ARKIMEX2="-dyn_ts_type arkimex -dyn_ts_arkimex_type 2e -dyn_ts_adapt_type basic"
ARKIMEX3="-dyn_ts_type arkimex -dyn_ts_adapt_type basic"
ARKIMEX4="-dyn_ts_type arkimex -dyn_ts_arkimex_type 4 -dyn_ts_adapt_type basic"
TSSOLVER=(SEMIEXPLICIT2 SEMIEXPLICIT3 CN CNV ROSW2 ROSW3 ROSW4 ARKIMEX2 ARKIMEX3 ARKIMEX4)

echo -e function [out] = scal${CASEFILE}_ts_${HOST}'\n' > $OUTFILE

TSSOLVERNAME=("rk2" "rk3" "cn" "cnv" "rosw2" "rosw3" "rosw4" "ark2" "ark3" "ark4")
LAG=4

echo -e "SERIAL PERFORMANCE" >> $OUTFILE

#NPROC=1

echo -e "PETSC LU 1 processor" >> $OUTFILE
echo %mpiexec -n 1 ./DYN ${MPIOPT} -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE -dyn_pc_type lu -dyn_pc_factor_mat_solver_package petsc -dyn_pc_factor_mat_ordering_type amd -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} '\n' >> $OUTFILE
ctr=0
for item in ${TSSOLVER[@]}
do
  eval TSOPT=\${$item[@]}
#  echo -e $ctr $TSOPT ${TSSOLVERNAME[$ctr]}
  # PETSC LU
  arr=`mpiexec -n 1 ${MPIOPT} ./DYN -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE ${TSOPT} -dyn_pc_type lu -dyn_pc_factor_mat_ordering_type amd -log_summary -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} | grep DYNSolve`
  splitarr=($arr)
#  nsteps=${splitarr[1]}
  time=`printf '%.4f' ${splitarr[3]}`
  if [ $ctr == 0 ];
  then
    time_1=$time
  fi
  sp=`echo "$time_1 / $time" | bc -l`
  printf "%s \t %3.2f \t %3.2f\n" ${TSSOLVERNAME[$ctr]} $time $sp >> $OUTFILE
  ((ctr+=1))
done

#echo -e "KLU 1 processor" >> $OUTFILE
#echo %mpiexec -n 1 ./DYN ${MPIOPT} -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE -dyn_pc_type lu -dyn_pc_factor_mat#_solver_package klu -dyn_pc_factor_mat_ordering_type amd -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} '\n' >> $OUTFILE

## KLU
#ctr=0
#for item in ${TSSOLVER[@]}
#do
#  eval TSOPT=\${$item[@]}
#  echo -e $ctr $TSOPT ${TSSOLVERNAME[$ctr]}
#  arr=`mpiexec -n 1 ${MPIOPT} ./DYN -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE ${TSOPT} -dyn_pc_type lu -dyn_pc_factor_mat_solver_package klu -dyn_pc_factor_mat_ordering_type amd -log_summary -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} | grep DYNSolve`
#  splitarr=($arr)
#  nsteps=${splitarr[1]}
#  time=`printf '%.4f' ${splitarr[3]}`
#  sp=`echo "$time_1 / $time" | bc -l`
#  printf "%s \t %d \t %3.2f \t %3.2f\n" ${TSSOLVERNAME[$ctr]} $nsteps $time $sp >> $OUTFILE
#  ((ctr+=1))
#done

echo -e "PARALLEL PERFORMANCE" >> $OUTFILE

SUBPCOPTIONS="-dyn_sub_pc_type lu -dyn_sub_pc_factor_mat_ordering_type amd"

#TSSOLVER=(ROSW2)
#TSSOLVERNAME=("rosw2")

for OVERLAP in 3 2
do
  for NPROC in 16 12 8 4 2
  do
    echo -e %mpiexec -n ${NPROC} ${MPIOPT} ./DYN -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE -dyn_pc_type asm -dyn_pc_asm_overlap $OVERLAP $SUBPCOPTIONS -pflow_pc_type asm -pflow_pc_asm_overlap $OVERLAP -pflow_sub_pc_type lu -pflow_sub_pc_factor_mat_ordering_type amd -log_summary -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} '\n' >> $OUTFILE
    ctr=0
    for item in ${TSSOLVER[@]}
    do
      eval TSOPT=\${$item[@]}
      #  echo -e $ctr $TSOPT ${TSSOLVERNAME[$ctr]}
      arr=`mpiexec -n ${NPROC} ${MPIOPT} ./DYN -netfile $RAWFILE -dyrfile $DYRFILE -eventfile $EVENTFILE ${TSOPT} -dyn_pc_type asm -dyn_pc_asm_overlap ${OVERLAP} ${SUBPCOPTIONS}  -pflow_pc_type asm -pflow_pc_asm_overlap $OVERLAP -pflow_sub_pc_type lu -pflow_sub_pc_factor_mat_ordering_type amd -log_summary -dyn_snes_lag_preconditioner ${LAG} ${TIMEOPT} | grep -i DYNSolve`
      splitarr=($arr)
#      nsteps=${splitarr[2]}
      time=`printf '%.4f' ${splitarr[3]}`
      sp=`echo "$time_1 / $time" | bc -l`
      printf "%d \t %d \t %s \t %3.2f \t %3.2f\n" ${OVERLAP} ${NPROC} ${TSSOLVERNAME[$ctr]} $time $sp >> $OUTFILE
      ((ctr+=1))
    done
  done
done

echo -e '\n' >> $OUTFILE